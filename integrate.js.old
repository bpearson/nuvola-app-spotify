/*
 * Copyright 2014 Chase Colman <chase@colman.io>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* Anonymous function is used not to pollute environment */
(function(Nuvola){
	var Integration = function(){
		// Overwrite default commnad function
		Nuvola.onMessageReceived = Nuvola.bind(this, this.messageHandler);

		this.reset();

		// For debug output
		this.name = "Spotify";

		var init = Nuvola.bind(this,this.init);

		this.tryInit = setInterval(init, 500);
	};

	Integration.prototype.init = function() {
		if (!window.Spotify.Shuttle._initContext) return;

		clearInterval(this.tryInit);

		// Add local links to globals
		this.context = window.Spotify.Shuttle._initContext;
		this.player = this.context.contextPlayer;
		this.appManager = this.context.applicationManager;

		var boundUpdate = Nuvola.bind(this,this.updateSongAndActions);

		this.player.addListeners({
			trackLoaded: boundUpdate,
			play: boundUpdate,
			pause: boundUpdate,
			stop: boundUpdate,
			stopped: boundUpdate,
			clear: boundUpdate
		});

		this.updateSongAndActions();
	};

	Integration.prototype.getApp = function(id) {
		var idFilter = function(el) { return el._id === id; };
		var result = this.appManager._apps._values.filter(idFilter);
		return result[0] || null;
	};

	// Reset song state
	Integration.prototype.reset = function() {
		Nuvola.updateSong(null, null, null, null, Nuvola.STATE_NONE);
	};

	// Update the song and actions
	Integration.prototype.updateSongAndActions = function() {
		this.updateSong();
		this.updateActions();
	};

	// Update the song
	Integration.prototype.updateSong = function() {
		this.player.getPlayerState().then(function (result) {
			var song = result.trackState.track;
			if (!song) this.reset();

			var state = result.playbackState.playing ? Nuvola.STATE_PLAYING : Nuvola.STATE_PAUSED;
			Nuvola.updateSong(song.name,
							song.artistName,
							song.albumName,
							song.image,
							state);
		});
	};

	// Update available actions based on context
	Integration.prototype.updateActions = function(name) {
		var usingRadio = this.player._loadedContextList._owner.indexOf("spotify:app:radio") === 0;

		Nuvola.updateAction(Nuvola.ACTION_TOGGLE_PLAY, !!this.player._currentTrack);
		Nuvola.updateAction(Nuvola.ACTION_FAVORITE, !!this.player._currentTrack&&!this.player._currentTrack.starred);
		Nuvola.updateAction(Nuvola.ACTION_THUMBS_UP, usingRadio);
		Nuvola.updateAction(Nuvola.ACTION_THUMBS_DOWN, usingRadio);

		if (!this.player._loadedContextList) return;

		this.player._loadedContextList.hasNext().then(function (result) {
			Nuvola.updateAction(Nuvola.ACTION_NEXT_SONG, result);
		});
		this.player._loadedContextList.hasPrevious().then(function (result) {
			Nuvola.updateAction(Nuvola.ACTION_PREV_SONG, result);
		});
	};

	Integration.prototype.messageHandler = function(cmd){
		try{
			switch (cmd) {
				case Nuvola.ACTION_PLAY:
					this.player.resume();
				break;
				case Nuvola.ACTION_PAUSE:
					this.player.pause();
				break;
				case Nuvola.ACTION_TOGGLE_PLAY:
					this.player.togglePlay();
				break;
				case Nuvola.ACTION_PREV_SONG:
					this.player.previous("backbtn");
				break;
				case Nuvola.ACTION_NEXT_SONG:
					this.player.next("fwdbtn");
				break;
				case Nuvola.ACTION_THUMBS_UP:
					this.getApp('radio')._frame.contentWindow.$("thumbsup").click();
				break;
				case Nuvola.ACTION_THUMBS_DOWN:
					this.getApp('radio')._frame.contentWindow.$("thumbsdown").click();
				break;
				case Nuvola.ACTION_FAVORITE:
					// All actions and hooks should eventually use the API
					SpotifyApi.api.request('library_star',['spotify:user:@',Spotify.Shuttle._initContext.contextPlayer._currentTrack.uri]);
				break;
				default:
					// Other commands are not supported
					throw {"message": "Not supported."};
			}
			console.log(this.name + ": comand '" + cmd + "' executed.");
		} catch(e){
			// Older API expected exception to be a string
			throw (this.name + ": " + e.message);
		}
	};

	// Store reference
	Nuvola.integration = new Integration(); // Singleton
})(this);
